---
layout: post
title:  "Functor/Applicative/Monad/Monoid memo"
date:   2015-11-01
categories: haskell
---

# FUNCTOR

## Covariant Functor

---
<br>

> Apply f to a value wrapped in a context

**class**
{% highlight haskell %}
class Functor f where
  fmap :: (a -> b) -> f a -> f b -- or infix <$>

Functor law:
  fmap id f = f
  fmap (f . g) = fmap f . fmap g
{% endhighlight %}


**Maybe instance**
{% highlight haskell %}
instance Functor Maybe where
  fmap f (Just x) = Just (f x)
  fmap f Nothing = Nothing
{% endhighlight %}

**Exemple**
{% highlight haskell %}
  fmap (+3) (Just 1) -- (+3) <$> Just 1
{% endhighlight %}

**Functions are Functors too**
{% highlight haskell %}
instance Functor ((->) r) where
  fmap f g = f . g  -- fmap on functions are just compositions

  -- fmap :: Functor f => (a -> b) -> f a -> f b
  -- (.)  :: (b -> c) -> (a -> b) -> a -> c
  -- (.) and fmap signatures look different but they aren't because (.) can be rewritten as
  -- (.)  :: (a -> b) -> (f -> a) -> f -> b which is also
  -- (.)  :: (a -> b) -> f a -> f b

-- which means you can do
fmap (+3) (+5) 1 -- 9

((+) <$> (*5)) x y -- means f (g x) y -> (5 * x) + y

{% endhighlight %}

## Contravariant/Covariant Functor

A covariant functor is just a normal functor with an fmap function defined as `fmap :: (a -> b) -> f a -> f b`
We can see it a producer. If we have `a = Just 1` then we can `fmap (+ 1) a` or `fmap show a` or any function that takes an Int as input.
**Covariant** functors takes a defined input and produce any output type they want from it whereas **Contravariant** can be seen more as Consumers. They have one output defined type yet they can consume any input.
A covariant functor will take an defined ouput and modify its input.
It needs to implement a similar typeclass:

**class**
{% highlight haskell %}
class Contravariant f where
  contramap :: (b -> a) -> f a -> f b

{% endhighlight %}

**Example**
{% highlight haskell %}
newtype CT b a = CT { runCT :: a -> b }

instance Contravariant (CT String) where
  -- f    : CV String
  -- f a' : CV String a' : CV (a' -> String)
  -- f b' : CV String b' : CV (b' -> String)

  -- (b' -> a') -> (CV String) a' -> (CV String) b'

  -- (b' -> a') -> CV(a' -> String) -> CV(b' -> String)

  contramap f (CT i) = CT(i . f)
{% endhighlight %}

**Usage**
{% highlight haskell %}
toS :: CT String Int
toS = CT show

contra =
  let
    operations = contramap (+ 1) $ contramap (+ 1) $ contramap (+ 1) toS
    -- here we can see that the (+1) operations will be all applied before toS is called
    -- we are consuming operations to produce something for toS
  in putStrLn $ runCT operations 1

{- now if we try to do something similar via covariant functors: -}

instance Functor (CV Int) where
  fmap f (CV i) = CV (f . i)

same :: CV Int Int
same = CV id

cova =
  let
    operations = fmap (+ 1) $ fmap (+ 1) $ fmap (+ 1) same
    -- you'll notice that `same` is applied before all the fmap
    -- we are producing something out of same
  in putStrLn $ show $ runCV operations 1

{% endhighlight %}

---
<br>


# APPLICATIVE

---
<br>

> Functor++ (functions wrapped in a context like Just(+3))

**class**
{% highlight haskell %}
class (Functor f) => Applicative f where
  pure :: a -> f a
  (<*>) :: f (a -> b) -> f a -> f b
{% endhighlight %}

**Maybe instance**
{% highlight haskell %}
instance Applicative Maybe where
  pure = Just
  Nothing <*> _ = Nothing
  (Just f) <*> foo = fmap f foo

Just (+3) <*> Just 2 -- Just 5
{% endhighlight %}

**Functions are Applicatives too**
{% highlight haskell %}
instance Applicative ((->) a) where
  pure = const
  (<*>) f g x = f x (g x)

  -- <*> :: Applicative f => f (a -> b) -> f a -> f b can be rewritten
  -- <*>  :: f -> a -> b -> f -> a -> f -> b

  -- which means you can do
  ((+) <*> (*10)) 3 -- 3 + (10 * 3) = 33

{% endhighlight %}

# MONAD

---
<br>

> Apply f (with f :: a -> m b) to a value wrapped in a context and return a new context

**class**
{% highlight haskell %}
class Control.Monad m where
  return :: a -> m a
  (>>=) :: m a -> (a -> m b) -> m b
  (>>) :: m a -> m b -> m b
  x >> y = x >>= \_ -> y
  (>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c -- usefull to compose monad
  f >=> g  = \x -> f x >>= g

{% endhighlight %}

**Maybe instance**
{% highlight haskell %}
instance Monad Maybe where
  return x = Just x
  Nothing  >>= _ = Nothing
  Just x >>= f = f x

big x =
  if x >= 10 then
    Just x + 1
  else
    Nothing

big 30 -- Just 30
big (Just 1) -- doesnt work
Just 10 >>= big -- Just 10
Just 10 >>= (big >=> big >=> big) -- Just 13
{% endhighlight %}

# MONOID

---
<br>

**class**
{% highlight haskell %}
class Data.Monoid m where
  mempty :: m
  mappend :: m -> m -> m
{% endhighlight %}
