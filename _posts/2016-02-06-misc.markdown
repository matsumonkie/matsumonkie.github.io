---
layout: post
title:  "Miscellaneous haskell tricks"
date:   2016-02-06
categories: misc recursive structure
---

# Parse a recursive structure

---
<br>

Say you have this simple recursive structure.
{% highlight haskell %}
import Data.Monoid

data Tree a = Node (Tree a, Tree a)
            | Leaf a
            deriving (Show)

tree = Node (Leaf 1, Node (Leaf 2, Leaf 3)) :: Tree Int

{% endhighlight %}

One basic way to parse it would simply be to pattern match it like this:

{% highlight haskell %}
parse :: (Monoid b) => (Tree a -> b) -> Tree a -> b
parse f tree = case tree of
  (Node (l, r)) -> parse f l <> parse f r
  leaf@(Leaf l) -> f leaf
{% endhighlight %}

One other way would consists in wrapping our structure in an array and parse its elements.

{% highlight haskell %}
parse :: (Monoid b) => (Tree a -> b) -> Tree a -> b
parse f tree =
  transform [tree] -- here we wrap tree in an array
  where transform [] = mempty
        transform (x:xs) = case x of
          Node (left, right) ->
            transform([left]) <> transform([right]) <> transform(xs)
          Leaf leaf -> f x
{% endhighlight %}



{% highlight haskell %}
showLeaf :: (Show a) => Tree a -> String
showLeaf (Leaf leaf) =  "(" ++ (show leaf) ++ ")"
showLeaf _ = ""

main = do
  putStrLn $ show $ parse showLeaf tree -- "(1)(2)(3)"

{% endhighlight %}
